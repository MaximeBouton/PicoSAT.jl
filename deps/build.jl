using BinaryProvider # requires BinaryProvider 0.3.0 or later

# Parse some basic command-line arguments
const verbose = "--verbose" in ARGS
const prefix = Prefix(get([a for a in ARGS if a != "--verbose"], 1, joinpath(@__DIR__, "usr")))
products = [
    LibraryProduct(prefix, ["libpicosat"], :libpicosat),
]

# Download binaries from hosted location
bin_prefix = "https://github.com/MaximeBouton/PicoSATBuilder/releases/download/v9.6.0"

# Listing of files generated by BinaryBuilder:
download_info = Dict(
    Linux(:i686, libc=:glibc) => ("$bin_prefix/PicoSATBuilder.v9.6.0.i686-linux-gnu.tar.gz", "fa1539bda4ab83b8a411edf21b6cb2d12d0f9cd214875b7bf2622af55c499d77"),
    Windows(:i686) => ("$bin_prefix/PicoSATBuilder.v9.6.0.i686-w64-mingw32.tar.gz", "1364be54de65d3756ec8eb4e4c77d26c8169cce30c37bd27e0d27ea013e94ffa"),
    MacOS(:x86_64) => ("$bin_prefix/PicoSATBuilder.v9.6.0.x86_64-apple-darwin14.tar.gz", "ebb5439a5a66ec1fb1c2f9b74ba4c6f70e2ef0a75b68da81bb5e5b798643a10a"),
    Linux(:x86_64, libc=:glibc) => ("$bin_prefix/PicoSATBuilder.v9.6.0.x86_64-linux-gnu.tar.gz", "be9facd244306c56e1b51d434497c6d3808ee12de414c466cda451083650469e"),
    Windows(:x86_64) => ("$bin_prefix/PicoSATBuilder.v9.6.0.x86_64-w64-mingw32.tar.gz", "e0c21854115ad756b2cd8a2aeafbf9ed54016bda2100637ef92b526a7d96960c"),
)

# Install unsatisfied or updated dependencies:
unsatisfied = any(!satisfied(p; verbose=verbose) for p in products)
dl_info = choose_download(download_info, platform_key_abi())
if dl_info === nothing && unsatisfied
    # If we don't have a compatible .tar.gz to download, complain.
    # Alternatively, you could attempt to install from a separate provider,
    # build from source or something even more ambitious here.
    error("Your platform (\"$(Sys.MACHINE)\", parsed as \"$(triplet(platform_key_abi()))\") is not supported by this package!")
end

# If we have a download, and we are unsatisfied (or the version we're
# trying to install is not itself installed) then load it up!
if unsatisfied || !isinstalled(dl_info...; prefix=prefix)
    # Download and install binaries
    install(dl_info...; prefix=prefix, force=true, verbose=verbose)
end

# Write out a deps.jl file that will contain mappings for our products
write_deps_file(joinpath(@__DIR__, "deps.jl"), products, verbose=verbose)
